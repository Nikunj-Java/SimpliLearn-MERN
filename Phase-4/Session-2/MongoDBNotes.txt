

1. Update Many Records in Database

	> db.Student.updateMany({ "address.zipcode":"31428-2261"},{ $set: { "email": "testmail@gmail.com"}})
	> db.Student.updateMany({ "address.zipcode":"31428-2261"},{ $set: { "email": "testmail@gmail.com", "name": "testuser"}})

2. Find Records

	[
	 {"name":"Alice", "age":24},
{"name":"Minal", "age":35},
{"name":"Charlie", "age":30}
	]

	>db.demo.find({ age: { $gte:25 }});
	
	>db.demo.find({ age: { $gte:30 }});
	
	>db.demo.find({ age: { $gte:35 }});

3. Replace Records
	>db.demo.replaceOne({condition})
	eg: db.demo.replaceOne({"name":"Alice"},{"name":"Alice","age":27,"city":"mumbai"})

4. Delete of Records
	>db.demo.deleteOne({"name":"Alice"});

	>db.demo.deleteMany({ age: { $lt:30 } })

5. Creating an Index for Faster Query Management
	- also known as improve query performance
	> db.Student.createIndex({name:1})
	- get an index
	> db.Student.getIndexes()
	- drop the index
	>db.Student.dropIndex("name_1")
	
	use:1
	>db.Student.find().sort({name:1})

	use:2 
	> db.Student.createIndex({name:"text"})
	> db.Student.find({ $text:{ $search:"xyz"}})
6. Related Operators
	> $gt: greater than
	> $gte: greater than or Equals to
	> $lte: less than or Equals  to
	> $lt: Less than
	> $eq: Equals to
	> $ne not equals to
7. Get Collection Information
	>db.getCollectionInfos({name:"Student"})
8.Agrregation:
	create Many records
	[
	 {"name":"Nikunj Soni", "subject":"Physics","marks":49},
{"name":"Nikunj Soni", "subject":"Chemistry","marks":89},
{"name":"Nikunj Soni", "subject":"Physics","marks":78},
{"name":"Nikunj Soni", "subject":"Physics","marks":49},
{"name":"Nikunj Soni", "subject":"Chemistry","marks":89},
{"name":"Nikunj Soni", "subject":"Physics","marks":78}
	]

	>db.Student.aggregate([{ $match: { name: "Nikunj Soni" } },{$group: { _id: null,total: { $sum: "$marks" } } }])
	>db.Student.aggregate([{ $match: { subject: "Physics" } },{$group: { _id: null,total: { $sum: "$marks" } } }])
	>db.Student.aggregate([{ $match: { subject: "Chemistry" } },{$group: { _id: null,total: { $sum: "$marks" } } }])
	 


Note:
	1.$match: used for filtering Documents 
	2.$group: used for group documents based on some valuues
	3.$sort: used to sort the documents and rearranging them
	4.$skip: skip n number of record in documents
	5.$limit: used to pass first n number of documents  thus limiting them
	6.$sum: its sums the numeric value for the document
	7.$count: gives the total numbers of documents
	8.$min: get the minimun value of documents
	9.$max: get the maximun value of document